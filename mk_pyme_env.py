import condacmds as cmds
from pathlib import Path
import logging

def download_pyme_extra(build_dir="build-test",branch='master',repo='csoeller/PYME-extra'):
    cmds.download_repo(repo, build_dir,branch=branch)
    cmds.unpack_snapshot(Path(build_dir) / 'PYME-extra.zip', build_dir)

def download_pyme(build_dir="build-test",branch='master',repo='python-microscopy/python-microscopy'):
    cmds.download_repo(repo, build_dir,branch=branch)
    cmds.unpack_snapshot(Path(build_dir) / 'python-microscopy.zip', build_dir)

def build_pyme(environment,build_dir="build-test",repo='python-microscopy/python-microscopy',branch='master'):
    ret = cmds.build_repo(repo,environment,build_dir=build_dir,branch=branch)
    logging.info("building PYME...")
    logging.info(ret)

def build_pyme_extra(environment,build_dir="build-test",repo='csoeller/PYME-extra',branch='master'):
    ret = cmds.build_repo(repo,environment,build_dir=build_dir,branch=branch)
    logging.info("building PYME-extra...")
    logging.info(ret)

def pyme_extra_install_plugins(environment,build_dir="build-test",repo='csoeller/PYME-extra',branch='master'):
    ret = cmds.repo_install_plugins(repo,environment,build_dir=build_dir,branch=branch)
    logging.info("installing PYME-extra plugins...")
    logging.info(ret)

# first attempt at a central package list
# not yet used 
Packages = {
    'with_pyme_depends' : {
        'packages' : 'matplotlib<=3.6 pyme-depends'.split()
    },
    'no_pyme_depends' : {
       'packagelists_mac' : [
           'scipy numpy "libblas=*=*accelerate"'.split(),
           ('matplotlib<=3.6 pytables pyopengl jinja2 cython pip requests pyyaml' +
            ' psutil pandas scikit-image scikit-learn sphinx toposort pybind11').split(),
           'traits traitsui==7.1.0 pyface==7.1.0'.split(),
           'python.app'.split(),
           ],
        'packagelists_win' : [
           'scipy numpy'.split(),
           ('matplotlib<=3.6 pytables pyopengl jinja2 cython pip requests pyyaml' +
            ' psutil pandas scikit-image scikit-learn sphinx toposort pybind11').split(),
           'traits traitsui==7.1.0 pyface==7.1.0'.split(),
           'python.app'.split(),
           ],
        'pip' : ['wxpython']
    }
}

# 0. some basic setup/parameter choices via command line arguments

import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--python',default='3.9',
                    help='specify the python version for the new environment')
parser.add_argument('--buildstem',default='build-test',
                    help='stem for the name of the build directory')
parser.add_argument('-c','--condacmd',default='conda',choices=['conda','mamba'],
                    help='conda command, should be one of conda or mamba')
parser.add_argument('-e','--environment',default=None,
                    help='name for the new environment, autogenerated from other params by default')
parser.add_argument('--recipes',action="store_true",
                    help='install the included customrecipes into the PYME config directory')
parser.add_argument('--pyme-repo',default='python-microscopy/python-microscopy',
                    help='github repository name of python-microscopy; defaults to python-microscopy/python-microscopy')
parser.add_argument('--pyme-branch',default='master',
                    help='branch of pyme to use in build; defaults to master')
parser.add_argument('--pymex-repo',default='csoeller/PYME-extra',
                    help='github repository name of PYME-extra; defaults to csoeller/PYME-extra')
parser.add_argument('--pymex-branch',default='master',
                    help='branch of PYME-extra to use in build; defaults to master')
parser.add_argument('--no-pymex',action="store_true",
                    help='omit downloading and installing PYME-extra')
parser.add_argument('--no-pyme-depends',action="store_true",
                    help='install from package list rather than using pyme-depends')


### Note
### we may want to add
# conda config --set channel_priority strict
### Check how to check, verify and unset


# other possible arguments to enable
# --pyme-branch: pick a branch other than the default 'master' branch
# --pyme-extra-branch: pick a branch other than the default 'master' branch
# --build_dir: specify full build directory name (e.g. for a more permanent install)
# potentially add jupyter notebook option
# potentially add R option (+R notebooks?)
# potentially allow cloning the whole github repos with a command line switch

args = parser.parse_args()

# # this makes methods/attributes for the standard parameters available
# # also does any setup stuff, e.g. create build_dir, setup logging etc
pbld = cmds.PymeBuild(pythonver=args.python,
                      build_dir=args.buildstem,
                      condacmd=args.condacmd,
                      environment=args.environment,
                      with_pyme_depends=not args.no_pyme_depends,
                      with_pymex=not args.no_pymex,
                      with_recipes=args.recipes
                      )

environment = pbld.env
build_dir = pbld.build_dir

envs = cmds.conda_envs()

# 1. make test environment

if environment not in envs:
    cc = cmds.conda_create(environment, pbld.pythonver, channels=['conda-forge'])
    logging.info(cc)
else:
    print('environment %s already exists' % environment)
    answer = input("Continue?")
    if answer.lower() not in ["y","yes"]:
        print("aborting...")
        import sys
        sys.exit(0)

# just a quick check that we get the expected python version and can invoke it ok
cc = cmds.run_cmd_in_environment('python -V',environment,check=True)
logging.info("got python version info: %s" % cc)

# 2. build/install pyme and dependencies

# pyme-depends
# current constraints:
# matplotlib<=3.6: matplotlib 3.7.X onwards backend_wx.cursord dictionaries are removed;
#                 3.8.X removes error_msg_wx function in backend_wx;
#                 both are used in PYME/DSView/modules/graphViewPanel.py
#                 this one needs enforcing both with pyme-depends and full package based installs (as on arm64)
# traitsui==7.1.0 pyface==7.1.0: what is the issue?
#                 this one needs enforcing only with full package based installs (as on arm64);
#                 probably implicitly established via pyme-depends based install
import platform
from packaging import version # should be available in the base install; otherwise we may need "# conda/pip install packaging"
prepy3_10 = version.parse(pbld.pythonver) < version.parse("3.10")
if platform.machine() != 'arm64' and prepy3_10 and pbld.with_pyme_depends:
    # the initial matplotlib pinning should ensure we do not get a too recent version 
    packages = 'matplotlib<=3.6 pyme-depends'.split()
    
    result = cmds.conda_install(environment, packages, channels = ['conda-forge','david_baddeley'])
    logging.info(result)
else:
    # NOTE: mac on arm has no pre-built pyme-depends - we need to install all the required packages "manually" (in a fashion)
    # start off with numpy/scipy
    # the "libblas=*=*accelerate" arguments according to a number of sites, e.g.
    #   - https://github.com/joblib/threadpoolctl/issues/135
    #   - https://github.com/conda-forge/numpy-feedstock/issues/303

    # note docs on blas selection: https://conda-forge.org/docs/maintainer/knowledge_base.html#switching-blas-implementation
    # possible options
    # conda install "libblas=*=*mkl"
    # conda install "libblas=*=*openblas"
    # conda install "libblas=*=*blis"
    # conda install "libblas=*=*accelerate"
    # conda install "libblas=*=*netlib"

    if platform.system() == 'Darwin': # now selected for all macs
        package_stringset = 'scipy numpy "libblas=*=*accelerate"'.split()
    else:
        package_stringset = 'scipy numpy'.split()
    result = cmds.conda_install(environment, package_stringset, channels = ['conda-forge'])
    logging.info(result)

    # next the main other dependecies
    package_sets = [('matplotlib<=3.6 pytables pyopengl jinja2 cython pip requests pyyaml' +
                    ' psutil pandas scikit-image scikit-learn sphinx toposort pybind11').split(),
                    'traits traitsui==7.1.0 pyface==7.1.0'.split(),
                    'python.app'.split(),
                    ]
    for packages in package_sets:
        result = cmds.conda_install(environment, packages, channels = ['conda-forge'])
        logging.info(result)

    # now pip install wx - the conda install was deemed not working at the time; may need to check again
    result = cmds.pip_install(environment, ['wxpython'])
    logging.info(result)


download_pyme(build_dir=build_dir,repo=args.pyme_repo,branch=args.pyme_branch)
build_pyme(environment,build_dir=build_dir,repo=args.pyme_repo,branch=args.pyme_branch)

# potentially here: test for succesful pyme base install

# 3. build/install pyme-extra
if pbld.with_pymex:
    # pyme-extra dependencies
    packages = 'statsmodels roifile'.split()

    result = cmds.conda_install(environment, packages, channels = ['conda-forge'])
    logging.info(result)

    # circle-fit is not available in a recent enough version via conda-forge
    packages = 'circle-fit'.split()
    result = cmds.pip_install(environment, packages)
    logging.info(result)

    download_pyme_extra(build_dir=build_dir,repo=args.pymex_repo,branch=args.pymex_branch)
    build_pyme_extra(environment,build_dir=build_dir,repo=args.pymex_repo,branch=args.pymex_branch)
    pyme_extra_install_plugins(environment,build_dir=build_dir,repo=args.pymex_repo,branch=args.pymex_branch)

if pbld.with_recipes:
    output = cmds.run_cmd_in_environment('python install_config_files.py',environment)
    logging.info(output)

# potentially here: test for succesfull pyme-extra install
