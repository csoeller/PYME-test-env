### extra stuff to install
### this script will deal with some extra things that you might like in a more permanent install
### this could include jupyter notebooks, jupyterlab, conda kernels for notebooks, etc

import condacmds as cmds
from pathlib import Path
import logging

import sys
commandline = " ".join(sys.argv)

import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--python',default='3.9',
                    help='specify the python version for the new environment')
parser.add_argument('--buildstem',default='build-test',
                    help='stem for the name of the build directory')
parser.add_argument('--suffix',default=None,
                    help='suffix appended to default environment and build_dir')
parser.add_argument('-c','--condacmd',default='conda',choices=['conda','mamba'],
                    help='conda command, should be one of conda or mamba')
parser.add_argument('-e','--environment',default=None,
                    help='name for the new environment, autogenerated from other params by default')
parser.add_argument('--use-git',action="store_true",
                    help='clone git repo locally rather than just downloading snapshot')
parser.add_argument('--no-strict-channel',action="store_true",
                    help='enforce strict adherance to conda-forge channel')
parser.add_argument('--dry-run',action="store_true",
                    help='just process options but do not run any commands')

args = parser.parse_args()

cmds.check_condaenv('base') # check we are running in the base environment

# # this makes methods/attributes for the standard parameters available
# # also does any setup stuff, e.g. create build_dir, setup logging etc
pbld = cmds.PymeBuild(pythonver=args.python,
                      build_dir=args.buildstem,
                      condacmd=args.condacmd,
                      environment=args.environment,
                      use_git=args.use_git,suffix=args.suffix,
                      strict_conda_forge_channel=not args.no_strict_channel,
                      dry_run=args.dry_run,
                      )

environment = pbld.env
build_dir = pbld.build_dir

logging.info("Command called as\n")
logging.info(commandline + "\n")

if args.dry_run:
    logging.info("dry run, aborting...")
    import sys
    sys.exit(0)

# initially this will be non-functional and we will collect ideas here to be fleshed out in the next step

extrapackages = {
    'notebooks' : {'conda': 'notebook ipympl jupyterlab nb_conda_kernels'.split()},
    'pymecompress' : {'pip': 'pymecompress'},
    }

def install_pymenf():
    # we need a zip file with pymenf option for installation
    # unpack into suitable place and then build
    # and register recipe modules
    pass

conda_flags = '--override-channels -c conda-forge' # this is aimed at sticking to conda-forge and not mix with default channel etc

# while in the new env set a few channel options
# set env-specific channel options
# see also discussion in https://stackoverflow.com/questions/67202874/what-is-nb-conda-kernels-equivalent-for-python-3-9
# note: we may move these options into the main environment creating script
# conda config --env --set channel_priority strict
# conda config --env --add channels conda-forge
